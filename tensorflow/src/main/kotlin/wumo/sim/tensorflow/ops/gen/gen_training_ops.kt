/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.tensorflow.ops.gen
import org.bytedeco.javacpp.tensorflow.*
import wumo.sim.tensorflow.ops.Output
import wumo.sim.util.Shape
import wumo.sim.tensorflow.buildOp
import wumo.sim.tensorflow.buildOpTensor
import wumo.sim.tensorflow.buildOpTensors
import wumo.sim.tensorflow.tf
import wumo.sim.util.ndarray.NDArray

interface gen_training_ops {
fun _applyAdadelta(_var: Output, accum: Output, accum_update: Output, lr: Output, rho: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, name: String = "ApplyAdadelta") = run {
buildOpTensor("ApplyAdadelta", name){
addInput(_var,true)
addInput(accum,true)
addInput(accum_update,true)
addInput(lr,false)
addInput(rho,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _applyAdagrad(_var: Output, accum: Output, lr: Output, grad: Output, use_locking: Boolean = false, update_slots: Boolean = true, name: String = "ApplyAdagrad") = run {
buildOpTensor("ApplyAdagrad", name){
addInput(_var,true)
addInput(accum,true)
addInput(lr,false)
addInput(grad,false)
attr("use_locking", use_locking)
attr("update_slots", update_slots)
}
}
fun _applyAdagradDA(_var: Output, gradient_accumulator: Output, gradient_squared_accumulator: Output, grad: Output, lr: Output, l1: Output, l2: Output, global_step: Output, use_locking: Boolean = false, name: String = "ApplyAdagradDA") = run {
buildOpTensor("ApplyAdagradDA", name){
addInput(_var,true)
addInput(gradient_accumulator,true)
addInput(gradient_squared_accumulator,true)
addInput(grad,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(global_step,false)
attr("use_locking", use_locking)
}
}
fun _applyAdam(_var: Output, m: Output, v: Output, beta1_power: Output, beta2_power: Output, lr: Output, beta1: Output, beta2: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, use_nesterov: Boolean = false, name: String = "ApplyAdam") = run {
buildOpTensor("ApplyAdam", name){
addInput(_var,true)
addInput(m,true)
addInput(v,true)
addInput(beta1_power,false)
addInput(beta2_power,false)
addInput(lr,false)
addInput(beta1,false)
addInput(beta2,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
attr("use_nesterov", use_nesterov)
}
}
fun _applyAddSign(_var: Output, m: Output, lr: Output, alpha: Output, sign_decay: Output, beta: Output, grad: Output, use_locking: Boolean = false, name: String = "ApplyAddSign") = run {
buildOpTensor("ApplyAddSign", name){
addInput(_var,true)
addInput(m,true)
addInput(lr,false)
addInput(alpha,false)
addInput(sign_decay,false)
addInput(beta,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _applyCenteredRMSProp(_var: Output, mg: Output, ms: Output, mom: Output, lr: Output, rho: Output, momentum: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, name: String = "ApplyCenteredRMSProp") = run {
buildOpTensor("ApplyCenteredRMSProp", name){
addInput(_var,true)
addInput(mg,true)
addInput(ms,true)
addInput(mom,true)
addInput(lr,false)
addInput(rho,false)
addInput(momentum,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _applyFtrl(_var: Output, accum: Output, linear: Output, grad: Output, lr: Output, l1: Output, l2: Output, lr_power: Output, use_locking: Boolean = false, name: String = "ApplyFtrl") = run {
buildOpTensor("ApplyFtrl", name){
addInput(_var,true)
addInput(accum,true)
addInput(linear,true)
addInput(grad,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(lr_power,false)
attr("use_locking", use_locking)
}
}
fun _applyFtrlV2(_var: Output, accum: Output, linear: Output, grad: Output, lr: Output, l1: Output, l2: Output, l2_shrinkage: Output, lr_power: Output, use_locking: Boolean = false, name: String = "ApplyFtrlV2") = run {
buildOpTensor("ApplyFtrlV2", name){
addInput(_var,true)
addInput(accum,true)
addInput(linear,true)
addInput(grad,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(l2_shrinkage,false)
addInput(lr_power,false)
attr("use_locking", use_locking)
}
}
fun _applyGradientDescent(_var: Output, alpha: Output, delta: Output, use_locking: Boolean = false, name: String = "ApplyGradientDescent") = run {
buildOpTensor("ApplyGradientDescent", name){
addInput(_var,true)
addInput(alpha,false)
addInput(delta,false)
attr("use_locking", use_locking)
}
}
fun _applyMomentum(_var: Output, accum: Output, lr: Output, grad: Output, momentum: Output, use_locking: Boolean = false, use_nesterov: Boolean = false, name: String = "ApplyMomentum") = run {
buildOpTensor("ApplyMomentum", name){
addInput(_var,true)
addInput(accum,true)
addInput(lr,false)
addInput(grad,false)
addInput(momentum,false)
attr("use_locking", use_locking)
attr("use_nesterov", use_nesterov)
}
}
fun _applyPowerSign(_var: Output, m: Output, lr: Output, logbase: Output, sign_decay: Output, beta: Output, grad: Output, use_locking: Boolean = false, name: String = "ApplyPowerSign") = run {
buildOpTensor("ApplyPowerSign", name){
addInput(_var,true)
addInput(m,true)
addInput(lr,false)
addInput(logbase,false)
addInput(sign_decay,false)
addInput(beta,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _applyProximalAdagrad(_var: Output, accum: Output, lr: Output, l1: Output, l2: Output, grad: Output, use_locking: Boolean = false, name: String = "ApplyProximalAdagrad") = run {
buildOpTensor("ApplyProximalAdagrad", name){
addInput(_var,true)
addInput(accum,true)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _applyProximalGradientDescent(_var: Output, alpha: Output, l1: Output, l2: Output, delta: Output, use_locking: Boolean = false, name: String = "ApplyProximalGradientDescent") = run {
buildOpTensor("ApplyProximalGradientDescent", name){
addInput(_var,true)
addInput(alpha,false)
addInput(l1,false)
addInput(l2,false)
addInput(delta,false)
attr("use_locking", use_locking)
}
}
fun _applyRMSProp(_var: Output, ms: Output, mom: Output, lr: Output, rho: Output, momentum: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, name: String = "ApplyRMSProp") = run {
buildOpTensor("ApplyRMSProp", name){
addInput(_var,true)
addInput(ms,true)
addInput(mom,true)
addInput(lr,false)
addInput(rho,false)
addInput(momentum,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyAdadelta(_var: Output, accum: Output, accum_update: Output, lr: Output, rho: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, name: String = "ResourceApplyAdadelta") = run {
buildOp("ResourceApplyAdadelta", name){
addInput(_var,false)
addInput(accum,false)
addInput(accum_update,false)
addInput(lr,false)
addInput(rho,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyAdagrad(_var: Output, accum: Output, lr: Output, grad: Output, use_locking: Boolean = false, update_slots: Boolean = true, name: String = "ResourceApplyAdagrad") = run {
buildOp("ResourceApplyAdagrad", name){
addInput(_var,false)
addInput(accum,false)
addInput(lr,false)
addInput(grad,false)
attr("use_locking", use_locking)
attr("update_slots", update_slots)
}
}
fun _resourceApplyAdagradDA(_var: Output, gradient_accumulator: Output, gradient_squared_accumulator: Output, grad: Output, lr: Output, l1: Output, l2: Output, global_step: Output, use_locking: Boolean = false, name: String = "ResourceApplyAdagradDA") = run {
buildOp("ResourceApplyAdagradDA", name){
addInput(_var,false)
addInput(gradient_accumulator,false)
addInput(gradient_squared_accumulator,false)
addInput(grad,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(global_step,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyAdam(_var: Output, m: Output, v: Output, beta1_power: Output, beta2_power: Output, lr: Output, beta1: Output, beta2: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, use_nesterov: Boolean = false, name: String = "ResourceApplyAdam") = run {
buildOp("ResourceApplyAdam", name){
addInput(_var,false)
addInput(m,false)
addInput(v,false)
addInput(beta1_power,false)
addInput(beta2_power,false)
addInput(lr,false)
addInput(beta1,false)
addInput(beta2,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
attr("use_nesterov", use_nesterov)
}
}
fun _resourceApplyAddSign(_var: Output, m: Output, lr: Output, alpha: Output, sign_decay: Output, beta: Output, grad: Output, use_locking: Boolean = false, name: String = "ResourceApplyAddSign") = run {
buildOp("ResourceApplyAddSign", name){
addInput(_var,false)
addInput(m,false)
addInput(lr,false)
addInput(alpha,false)
addInput(sign_decay,false)
addInput(beta,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyCenteredRMSProp(_var: Output, mg: Output, ms: Output, mom: Output, lr: Output, rho: Output, momentum: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, name: String = "ResourceApplyCenteredRMSProp") = run {
buildOp("ResourceApplyCenteredRMSProp", name){
addInput(_var,false)
addInput(mg,false)
addInput(ms,false)
addInput(mom,false)
addInput(lr,false)
addInput(rho,false)
addInput(momentum,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyFtrl(_var: Output, accum: Output, linear: Output, grad: Output, lr: Output, l1: Output, l2: Output, lr_power: Output, use_locking: Boolean = false, name: String = "ResourceApplyFtrl") = run {
buildOp("ResourceApplyFtrl", name){
addInput(_var,false)
addInput(accum,false)
addInput(linear,false)
addInput(grad,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(lr_power,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyFtrlV2(_var: Output, accum: Output, linear: Output, grad: Output, lr: Output, l1: Output, l2: Output, l2_shrinkage: Output, lr_power: Output, use_locking: Boolean = false, name: String = "ResourceApplyFtrlV2") = run {
buildOp("ResourceApplyFtrlV2", name){
addInput(_var,false)
addInput(accum,false)
addInput(linear,false)
addInput(grad,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(l2_shrinkage,false)
addInput(lr_power,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyGradientDescent(_var: Output, alpha: Output, delta: Output, use_locking: Boolean = false, name: String = "ResourceApplyGradientDescent") = run {
buildOp("ResourceApplyGradientDescent", name){
addInput(_var,false)
addInput(alpha,false)
addInput(delta,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyMomentum(_var: Output, accum: Output, lr: Output, grad: Output, momentum: Output, use_locking: Boolean = false, use_nesterov: Boolean = false, name: String = "ResourceApplyMomentum") = run {
buildOp("ResourceApplyMomentum", name){
addInput(_var,false)
addInput(accum,false)
addInput(lr,false)
addInput(grad,false)
addInput(momentum,false)
attr("use_locking", use_locking)
attr("use_nesterov", use_nesterov)
}
}
fun _resourceApplyPowerSign(_var: Output, m: Output, lr: Output, logbase: Output, sign_decay: Output, beta: Output, grad: Output, use_locking: Boolean = false, name: String = "ResourceApplyPowerSign") = run {
buildOp("ResourceApplyPowerSign", name){
addInput(_var,false)
addInput(m,false)
addInput(lr,false)
addInput(logbase,false)
addInput(sign_decay,false)
addInput(beta,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyProximalAdagrad(_var: Output, accum: Output, lr: Output, l1: Output, l2: Output, grad: Output, use_locking: Boolean = false, name: String = "ResourceApplyProximalAdagrad") = run {
buildOp("ResourceApplyProximalAdagrad", name){
addInput(_var,false)
addInput(accum,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyProximalGradientDescent(_var: Output, alpha: Output, l1: Output, l2: Output, delta: Output, use_locking: Boolean = false, name: String = "ResourceApplyProximalGradientDescent") = run {
buildOp("ResourceApplyProximalGradientDescent", name){
addInput(_var,false)
addInput(alpha,false)
addInput(l1,false)
addInput(l2,false)
addInput(delta,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyRMSProp(_var: Output, ms: Output, mom: Output, lr: Output, rho: Output, momentum: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, name: String = "ResourceApplyRMSProp") = run {
buildOp("ResourceApplyRMSProp", name){
addInput(_var,false)
addInput(ms,false)
addInput(mom,false)
addInput(lr,false)
addInput(rho,false)
addInput(momentum,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _resourceSparseApplyAdadelta(_var: Output, accum: Output, accum_update: Output, lr: Output, rho: Output, epsilon: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "ResourceSparseApplyAdadelta") = run {
buildOp("ResourceSparseApplyAdadelta", name){
addInput(_var,false)
addInput(accum,false)
addInput(accum_update,false)
addInput(lr,false)
addInput(rho,false)
addInput(epsilon,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _resourceSparseApplyAdagrad(_var: Output, accum: Output, lr: Output, grad: Output, indices: Output, use_locking: Boolean = false, update_slots: Boolean = true, name: String = "ResourceSparseApplyAdagrad") = run {
buildOp("ResourceSparseApplyAdagrad", name){
addInput(_var,false)
addInput(accum,false)
addInput(lr,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
attr("update_slots", update_slots)
}
}
fun _resourceSparseApplyAdagradDA(_var: Output, gradient_accumulator: Output, gradient_squared_accumulator: Output, grad: Output, indices: Output, lr: Output, l1: Output, l2: Output, global_step: Output, use_locking: Boolean = false, name: String = "ResourceSparseApplyAdagradDA") = run {
buildOp("ResourceSparseApplyAdagradDA", name){
addInput(_var,false)
addInput(gradient_accumulator,false)
addInput(gradient_squared_accumulator,false)
addInput(grad,false)
addInput(indices,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(global_step,false)
attr("use_locking", use_locking)
}
}
fun _resourceSparseApplyCenteredRMSProp(_var: Output, mg: Output, ms: Output, mom: Output, lr: Output, rho: Output, momentum: Output, epsilon: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "ResourceSparseApplyCenteredRMSProp") = run {
buildOp("ResourceSparseApplyCenteredRMSProp", name){
addInput(_var,false)
addInput(mg,false)
addInput(ms,false)
addInput(mom,false)
addInput(lr,false)
addInput(rho,false)
addInput(momentum,false)
addInput(epsilon,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _resourceSparseApplyFtrl(_var: Output, accum: Output, linear: Output, grad: Output, indices: Output, lr: Output, l1: Output, l2: Output, lr_power: Output, use_locking: Boolean = false, name: String = "ResourceSparseApplyFtrl") = run {
buildOp("ResourceSparseApplyFtrl", name){
addInput(_var,false)
addInput(accum,false)
addInput(linear,false)
addInput(grad,false)
addInput(indices,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(lr_power,false)
attr("use_locking", use_locking)
}
}
fun _resourceSparseApplyFtrlV2(_var: Output, accum: Output, linear: Output, grad: Output, indices: Output, lr: Output, l1: Output, l2: Output, l2_shrinkage: Output, lr_power: Output, use_locking: Boolean = false, name: String = "ResourceSparseApplyFtrlV2") = run {
buildOp("ResourceSparseApplyFtrlV2", name){
addInput(_var,false)
addInput(accum,false)
addInput(linear,false)
addInput(grad,false)
addInput(indices,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(l2_shrinkage,false)
addInput(lr_power,false)
attr("use_locking", use_locking)
}
}
fun _resourceSparseApplyMomentum(_var: Output, accum: Output, lr: Output, grad: Output, indices: Output, momentum: Output, use_locking: Boolean = false, use_nesterov: Boolean = false, name: String = "ResourceSparseApplyMomentum") = run {
buildOp("ResourceSparseApplyMomentum", name){
addInput(_var,false)
addInput(accum,false)
addInput(lr,false)
addInput(grad,false)
addInput(indices,false)
addInput(momentum,false)
attr("use_locking", use_locking)
attr("use_nesterov", use_nesterov)
}
}
fun _resourceSparseApplyProximalAdagrad(_var: Output, accum: Output, lr: Output, l1: Output, l2: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "ResourceSparseApplyProximalAdagrad") = run {
buildOp("ResourceSparseApplyProximalAdagrad", name){
addInput(_var,false)
addInput(accum,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _resourceSparseApplyProximalGradientDescent(_var: Output, alpha: Output, l1: Output, l2: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "ResourceSparseApplyProximalGradientDescent") = run {
buildOp("ResourceSparseApplyProximalGradientDescent", name){
addInput(_var,false)
addInput(alpha,false)
addInput(l1,false)
addInput(l2,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _resourceSparseApplyRMSProp(_var: Output, ms: Output, mom: Output, lr: Output, rho: Output, momentum: Output, epsilon: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "ResourceSparseApplyRMSProp") = run {
buildOp("ResourceSparseApplyRMSProp", name){
addInput(_var,false)
addInput(ms,false)
addInput(mom,false)
addInput(lr,false)
addInput(rho,false)
addInput(momentum,false)
addInput(epsilon,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _sparseApplyAdadelta(_var: Output, accum: Output, accum_update: Output, lr: Output, rho: Output, epsilon: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "SparseApplyAdadelta") = run {
buildOpTensor("SparseApplyAdadelta", name){
addInput(_var,true)
addInput(accum,true)
addInput(accum_update,true)
addInput(lr,false)
addInput(rho,false)
addInput(epsilon,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _sparseApplyAdagrad(_var: Output, accum: Output, lr: Output, grad: Output, indices: Output, use_locking: Boolean = false, update_slots: Boolean = true, name: String = "SparseApplyAdagrad") = run {
buildOpTensor("SparseApplyAdagrad", name){
addInput(_var,true)
addInput(accum,true)
addInput(lr,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
attr("update_slots", update_slots)
}
}
fun _sparseApplyAdagradDA(_var: Output, gradient_accumulator: Output, gradient_squared_accumulator: Output, grad: Output, indices: Output, lr: Output, l1: Output, l2: Output, global_step: Output, use_locking: Boolean = false, name: String = "SparseApplyAdagradDA") = run {
buildOpTensor("SparseApplyAdagradDA", name){
addInput(_var,true)
addInput(gradient_accumulator,true)
addInput(gradient_squared_accumulator,true)
addInput(grad,false)
addInput(indices,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(global_step,false)
attr("use_locking", use_locking)
}
}
fun _sparseApplyCenteredRMSProp(_var: Output, mg: Output, ms: Output, mom: Output, lr: Output, rho: Output, momentum: Output, epsilon: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "SparseApplyCenteredRMSProp") = run {
buildOpTensor("SparseApplyCenteredRMSProp", name){
addInput(_var,true)
addInput(mg,true)
addInput(ms,true)
addInput(mom,true)
addInput(lr,false)
addInput(rho,false)
addInput(momentum,false)
addInput(epsilon,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _sparseApplyFtrl(_var: Output, accum: Output, linear: Output, grad: Output, indices: Output, lr: Output, l1: Output, l2: Output, lr_power: Output, use_locking: Boolean = false, name: String = "SparseApplyFtrl") = run {
buildOpTensor("SparseApplyFtrl", name){
addInput(_var,true)
addInput(accum,true)
addInput(linear,true)
addInput(grad,false)
addInput(indices,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(lr_power,false)
attr("use_locking", use_locking)
}
}
fun _sparseApplyFtrlV2(_var: Output, accum: Output, linear: Output, grad: Output, indices: Output, lr: Output, l1: Output, l2: Output, l2_shrinkage: Output, lr_power: Output, use_locking: Boolean = false, name: String = "SparseApplyFtrlV2") = run {
buildOpTensor("SparseApplyFtrlV2", name){
addInput(_var,true)
addInput(accum,true)
addInput(linear,true)
addInput(grad,false)
addInput(indices,false)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(l2_shrinkage,false)
addInput(lr_power,false)
attr("use_locking", use_locking)
}
}
fun _sparseApplyMomentum(_var: Output, accum: Output, lr: Output, grad: Output, indices: Output, momentum: Output, use_locking: Boolean = false, use_nesterov: Boolean = false, name: String = "SparseApplyMomentum") = run {
buildOpTensor("SparseApplyMomentum", name){
addInput(_var,true)
addInput(accum,true)
addInput(lr,false)
addInput(grad,false)
addInput(indices,false)
addInput(momentum,false)
attr("use_locking", use_locking)
attr("use_nesterov", use_nesterov)
}
}
fun _sparseApplyProximalAdagrad(_var: Output, accum: Output, lr: Output, l1: Output, l2: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "SparseApplyProximalAdagrad") = run {
buildOpTensor("SparseApplyProximalAdagrad", name){
addInput(_var,true)
addInput(accum,true)
addInput(lr,false)
addInput(l1,false)
addInput(l2,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _sparseApplyProximalGradientDescent(_var: Output, alpha: Output, l1: Output, l2: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "SparseApplyProximalGradientDescent") = run {
buildOpTensor("SparseApplyProximalGradientDescent", name){
addInput(_var,true)
addInput(alpha,false)
addInput(l1,false)
addInput(l2,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _sparseApplyRMSProp(_var: Output, ms: Output, mom: Output, lr: Output, rho: Output, momentum: Output, epsilon: Output, grad: Output, indices: Output, use_locking: Boolean = false, name: String = "SparseApplyRMSProp") = run {
buildOpTensor("SparseApplyRMSProp", name){
addInput(_var,true)
addInput(ms,true)
addInput(mom,true)
addInput(lr,false)
addInput(rho,false)
addInput(momentum,false)
addInput(epsilon,false)
addInput(grad,false)
addInput(indices,false)
attr("use_locking", use_locking)
}
}
fun _applyAdaMax(_var: Output, m: Output, v: Output, beta1_power: Output, lr: Output, beta1: Output, beta2: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, name: String = "ApplyAdaMax") = run {
buildOpTensor("ApplyAdaMax", name){
addInput(_var,true)
addInput(m,true)
addInput(v,true)
addInput(beta1_power,false)
addInput(lr,false)
addInput(beta1,false)
addInput(beta2,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
fun _resourceApplyAdaMax(_var: Output, m: Output, v: Output, beta1_power: Output, lr: Output, beta1: Output, beta2: Output, epsilon: Output, grad: Output, use_locking: Boolean = false, name: String = "ResourceApplyAdaMax") = run {
buildOp("ResourceApplyAdaMax", name){
addInput(_var,false)
addInput(m,false)
addInput(v,false)
addInput(beta1_power,false)
addInput(lr,false)
addInput(beta1,false)
addInput(beta2,false)
addInput(epsilon,false)
addInput(grad,false)
attr("use_locking", use_locking)
}
}
}