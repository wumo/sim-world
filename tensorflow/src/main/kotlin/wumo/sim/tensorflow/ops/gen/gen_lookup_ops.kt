/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.tensorflow.ops.gen
import org.bytedeco.javacpp.tensorflow.*
import wumo.sim.tensorflow.ops.Output
import wumo.sim.util.Shape
import wumo.sim.tensorflow.buildOp
import wumo.sim.tensorflow.buildOpTensor
import wumo.sim.tensorflow.buildOpTensors
import wumo.sim.tensorflow.tf
import wumo.sim.util.ndarray.NDArray

interface gen_lookup_ops {
fun _hashTableV2(key_dtype: Int, value_dtype: Int, container: String = "", shared_name: String = "", use_node_name_sharing: Boolean = false, name: String = "HashTableV2") = run {
buildOpTensor("HashTableV2", name){
attrType("key_dtype", key_dtype)
attrType("value_dtype", value_dtype)
attr("container", container)
attr("shared_name", shared_name)
attr("use_node_name_sharing", use_node_name_sharing)
}
}
fun _initializeTableFromTextFileV2(table_handle: Output, filename: Output, key_index: Long, value_index: Long, vocab_size: Long = -1L, delimiter: String = "\t", name: String = "InitializeTableFromTextFileV2") = run {
buildOp("InitializeTableFromTextFileV2", name){
addInput(table_handle,false)
addInput(filename,false)
attr("key_index", key_index)
attr("value_index", value_index)
attr("vocab_size", vocab_size)
attr("delimiter", delimiter)
}
}
fun _initializeTableV2(table_handle: Output, keys: Output, values: Output, name: String = "InitializeTableV2") = run {
buildOp("InitializeTableV2", name){
addInput(table_handle,false)
addInput(keys,false)
addInput(values,false)
}
}
fun _lookupTableExportV2(table_handle: Output, tkeys: Int, tvalues: Int, name: String = "LookupTableExportV2") = run {
buildOpTensors("LookupTableExportV2", name){
addInput(table_handle,false)
attrType("Tkeys", tkeys)
attrType("Tvalues", tvalues)
}
}
fun _lookupTableFindV2(table_handle: Output, keys: Output, default_value: Output, name: String = "LookupTableFindV2") = run {
buildOpTensor("LookupTableFindV2", name){
addInput(table_handle,false)
addInput(keys,false)
addInput(default_value,false)
}
}
fun _lookupTableImportV2(table_handle: Output, keys: Output, values: Output, name: String = "LookupTableImportV2") = run {
buildOp("LookupTableImportV2", name){
addInput(table_handle,false)
addInput(keys,false)
addInput(values,false)
}
}
fun _lookupTableInsertV2(table_handle: Output, keys: Output, values: Output, name: String = "LookupTableInsertV2") = run {
buildOp("LookupTableInsertV2", name){
addInput(table_handle,false)
addInput(keys,false)
addInput(values,false)
}
}
fun _lookupTableSizeV2(table_handle: Output, name: String = "LookupTableSizeV2") = run {
buildOpTensor("LookupTableSizeV2", name){
addInput(table_handle,false)
}
}
fun _mutableDenseHashTableV2(empty_key: Output, value_dtype: Int, container: String = "", shared_name: String = "", use_node_name_sharing: Boolean = false, value_shape: Shape = Shape(longArrayOf()), initial_num_buckets: Long = 131072L, max_load_factor: Float = 0.8f, name: String = "MutableDenseHashTableV2") = run {
buildOpTensor("MutableDenseHashTableV2", name){
addInput(empty_key,false)
attrType("value_dtype", value_dtype)
attr("container", container)
attr("shared_name", shared_name)
attr("use_node_name_sharing", use_node_name_sharing)
attr("value_shape", value_shape)
attr("initial_num_buckets", initial_num_buckets)
attr("max_load_factor", max_load_factor)
}
}
fun _mutableHashTableOfTensorsV2(key_dtype: Int, value_dtype: Int, container: String = "", shared_name: String = "", use_node_name_sharing: Boolean = false, value_shape: Shape = Shape(longArrayOf()), name: String = "MutableHashTableOfTensorsV2") = run {
buildOpTensor("MutableHashTableOfTensorsV2", name){
attrType("key_dtype", key_dtype)
attrType("value_dtype", value_dtype)
attr("container", container)
attr("shared_name", shared_name)
attr("use_node_name_sharing", use_node_name_sharing)
attr("value_shape", value_shape)
}
}
fun _mutableHashTableV2(key_dtype: Int, value_dtype: Int, container: String = "", shared_name: String = "", use_node_name_sharing: Boolean = false, name: String = "MutableHashTableV2") = run {
buildOpTensor("MutableHashTableV2", name){
attrType("key_dtype", key_dtype)
attrType("value_dtype", value_dtype)
attr("container", container)
attr("shared_name", shared_name)
attr("use_node_name_sharing", use_node_name_sharing)
}
}
}