/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.tensorflow.ops.gen

import wumo.sim.tensorflow.buildOp
import wumo.sim.tensorflow.buildOpTensor
import wumo.sim.tensorflow.buildOpTensors
import wumo.sim.tensorflow.ops.Output

interface gen_sdca_ops {
  fun _sdcaFprint(input: Output, name: String = "SdcaFprint") = run {
    buildOpTensor("SdcaFprint", name) {
      addInput(input, false)
    }
  }
  
  fun _sdcaOptimizer(sparse_example_indices: Array<Output>, sparse_feature_indices: Array<Output>, sparse_feature_values: Array<Output>, dense_features: Array<Output>, example_weights: Output, example_labels: Output, sparse_indices: Array<Output>, sparse_weights: Array<Output>, dense_weights: Array<Output>, example_state_data: Output, loss_type: String, l1: Float, l2: Float, num_loss_partitions: Long, num_inner_iterations: Long, adaptative: Boolean = false, name: String = "SdcaOptimizer") = run {
    buildOpTensors("SdcaOptimizer", name) {
      addInput(sparse_example_indices, false)
      addInput(sparse_feature_indices, false)
      addInput(sparse_feature_values, false)
      addInput(dense_features, false)
      addInput(example_weights, false)
      addInput(example_labels, false)
      addInput(sparse_indices, false)
      addInput(sparse_weights, false)
      addInput(dense_weights, false)
      addInput(example_state_data, false)
      attr("loss_type", loss_type)
      attr("l1", l1)
      attr("l2", l2)
      attr("num_loss_partitions", num_loss_partitions)
      attr("num_inner_iterations", num_inner_iterations)
      attr("adaptative", adaptative)
    }
  }
  
  fun _sdcaShrinkL1(weights: Array<Output>, l1: Float, l2: Float, name: String = "SdcaShrinkL1") = run {
    buildOp("SdcaShrinkL1", name) {
      addInput(weights, true)
      attr("l1", l1)
      attr("l2", l2)
    }
  }
}