/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.tensorflow.ops.gen

import wumo.sim.tensorflow.buildOpTensor
import wumo.sim.tensorflow.buildOpTensors
import wumo.sim.tensorflow.ops.Output
import wumo.sim.tensorflow.types.DataType

interface gen_list_ops {
  fun emptyTensorList(element_shape: Output, element_dtype: DataType<*>, name: String = "EmptyTensorList") = run {
    buildOpTensor("EmptyTensorList", name) {
      addInput(element_shape, false)
      attr("element_dtype", element_dtype)
    }
  }
  
  fun tensorListConcatLists(input_a: Output, input_b: Output, element_dtype: DataType<*>, name: String = "TensorListConcatLists") = run {
    buildOpTensor("TensorListConcatLists", name) {
      addInput(input_a, false)
      addInput(input_b, false)
      attr("element_dtype", element_dtype)
    }
  }
  
  fun tensorListElementShape(input_handle: Output, shape_type: DataType<*>, name: String = "TensorListElementShape") = run {
    buildOpTensor("TensorListElementShape", name) {
      addInput(input_handle, false)
      attr("shape_type", shape_type)
    }
  }
  
  fun tensorListFromTensor(tensor: Output, element_shape: Output, name: String = "TensorListFromTensor") = run {
    buildOpTensor("TensorListFromTensor", name) {
      addInput(tensor, false)
      addInput(element_shape, false)
    }
  }
  
  fun tensorListGetItem(input_handle: Output, index: Output, element_dtype: DataType<*>, name: String = "TensorListGetItem") = run {
    buildOpTensor("TensorListGetItem", name) {
      addInput(input_handle, false)
      addInput(index, false)
      attr("element_dtype", element_dtype)
    }
  }
  
  fun tensorListLength(input_handle: Output, name: String = "TensorListLength") = run {
    buildOpTensor("TensorListLength", name) {
      addInput(input_handle, false)
    }
  }
  
  fun tensorListPopBack(input_handle: Output, element_dtype: DataType<*>, name: String = "TensorListPopBack") = run {
    buildOpTensors("TensorListPopBack", name) {
      addInput(input_handle, false)
      attr("element_dtype", element_dtype)
    }
  }
  
  fun tensorListPushBack(input_handle: Output, tensor: Output, name: String = "TensorListPushBack") = run {
    buildOpTensor("TensorListPushBack", name) {
      addInput(input_handle, false)
      addInput(tensor, false)
    }
  }
  
  fun tensorListPushBackBatch(input_handles: Output, tensor: Output, name: String = "TensorListPushBackBatch") = run {
    buildOpTensor("TensorListPushBackBatch", name) {
      addInput(input_handles, false)
      addInput(tensor, false)
    }
  }
  
  fun tensorListReserve(element_shape: Output, num_elements: Output, element_dtype: DataType<*>, name: String = "TensorListReserve") = run {
    buildOpTensor("TensorListReserve", name) {
      addInput(element_shape, false)
      addInput(num_elements, false)
      attr("element_dtype", element_dtype)
    }
  }
  
  fun tensorListSetItem(input_handle: Output, index: Output, item: Output, name: String = "TensorListSetItem") = run {
    buildOpTensor("TensorListSetItem", name) {
      addInput(input_handle, false)
      addInput(index, false)
      addInput(item, false)
    }
  }
  
  fun tensorListStack(input_handle: Output, element_dtype: DataType<*>, num_elements: Long = -1L, name: String = "TensorListStack") = run {
    buildOpTensor("TensorListStack", name) {
      addInput(input_handle, false)
      attr("element_dtype", element_dtype)
      attr("num_elements", num_elements)
    }
  }
}