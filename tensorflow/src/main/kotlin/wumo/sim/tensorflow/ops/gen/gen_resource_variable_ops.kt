/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.tensorflow.ops.gen

import wumo.sim.tensorflow.buildOp
import wumo.sim.tensorflow.buildOpTensor
import wumo.sim.tensorflow.ops.Output
import wumo.sim.tensorflow.types.DataType
import wumo.sim.tensorflow.types.INT32
import wumo.sim.util.Shape

interface gen_resource_variable_ops {
  fun _assignAddVariableOp(resource: Output, value: Output, name: String = "AssignAddVariableOp") = run {
    buildOp("AssignAddVariableOp", name) {
      addInput(resource, false)
      addInput(value, false)
    }
  }
  
  fun _assignSubVariableOp(resource: Output, value: Output, name: String = "AssignSubVariableOp") = run {
    buildOp("AssignSubVariableOp", name) {
      addInput(resource, false)
      addInput(value, false)
    }
  }
  
  fun _assignVariableOp(resource: Output, value: Output, name: String = "AssignVariableOp") = run {
    buildOp("AssignVariableOp", name) {
      addInput(resource, false)
      addInput(value, false)
    }
  }
  
  fun _consumeMutexLock(mutex_lock: Output, name: String = "ConsumeMutexLock") = run {
    buildOp("ConsumeMutexLock", name) {
      addInput(mutex_lock, false)
    }
  }
  
  fun _destroyResourceOp(resource: Output, ignore_lookup_error: Boolean = true, name: String = "DestroyResourceOp") = run {
    buildOp("DestroyResourceOp", name) {
      addInput(resource, false)
      attr("ignore_lookup_error", ignore_lookup_error)
    }
  }
  
  fun _mutexLock(mutex: Output, name: String = "MutexLock") = run {
    buildOpTensor("MutexLock", name) {
      addInput(mutex, false)
    }
  }
  
  fun _mutexV2(container: String = "", shared_name: String = "", name: String = "MutexV2") = run {
    buildOpTensor("MutexV2", name) {
      attr("container", container)
      attr("shared_name", shared_name)
    }
  }
  
  fun _readVariableOp(resource: Output, dtype: DataType<*>, name: String = "ReadVariableOp") = run {
    buildOpTensor("ReadVariableOp", name) {
      addInput(resource, false)
      attr("dtype", dtype)
    }
  }
  
  fun _resourceGather(resource: Output, indices: Output, dtype: DataType<*>, validate_indices: Boolean = true, name: String = "ResourceGather") = run {
    buildOpTensor("ResourceGather", name) {
      addInput(resource, false)
      addInput(indices, false)
      attr("dtype", dtype)
      attr("validate_indices", validate_indices)
    }
  }
  
  fun _resourceScatterAdd(resource: Output, indices: Output, updates: Output, name: String = "ResourceScatterAdd") = run {
    buildOp("ResourceScatterAdd", name) {
      addInput(resource, false)
      addInput(indices, false)
      addInput(updates, false)
    }
  }
  
  fun _resourceScatterDiv(resource: Output, indices: Output, updates: Output, name: String = "ResourceScatterDiv") = run {
    buildOp("ResourceScatterDiv", name) {
      addInput(resource, false)
      addInput(indices, false)
      addInput(updates, false)
    }
  }
  
  fun _resourceScatterMax(resource: Output, indices: Output, updates: Output, name: String = "ResourceScatterMax") = run {
    buildOp("ResourceScatterMax", name) {
      addInput(resource, false)
      addInput(indices, false)
      addInput(updates, false)
    }
  }
  
  fun _resourceScatterMin(resource: Output, indices: Output, updates: Output, name: String = "ResourceScatterMin") = run {
    buildOp("ResourceScatterMin", name) {
      addInput(resource, false)
      addInput(indices, false)
      addInput(updates, false)
    }
  }
  
  fun _resourceScatterMul(resource: Output, indices: Output, updates: Output, name: String = "ResourceScatterMul") = run {
    buildOp("ResourceScatterMul", name) {
      addInput(resource, false)
      addInput(indices, false)
      addInput(updates, false)
    }
  }
  
  fun _resourceScatterSub(resource: Output, indices: Output, updates: Output, name: String = "ResourceScatterSub") = run {
    buildOp("ResourceScatterSub", name) {
      addInput(resource, false)
      addInput(indices, false)
      addInput(updates, false)
    }
  }
  
  fun _resourceScatterUpdate(resource: Output, indices: Output, updates: Output, name: String = "ResourceScatterUpdate") = run {
    buildOp("ResourceScatterUpdate", name) {
      addInput(resource, false)
      addInput(indices, false)
      addInput(updates, false)
    }
  }
  
  fun _varHandleOp(dtype: DataType<*>, shape: Shape, container: String = "", shared_name: String = "", name: String = "VarHandleOp") = run {
    buildOpTensor("VarHandleOp", name) {
      attr("dtype", dtype)
      attr("shape", shape)
      attr("container", container)
      attr("shared_name", shared_name)
    }
  }
  
  fun _varIsInitializedOp(resource: Output, name: String = "VarIsInitializedOp") = run {
    buildOpTensor("VarIsInitializedOp", name) {
      addInput(resource, false)
    }
  }
  
  fun _variableShape(input: Output, out_type: DataType<*> = INT32, name: String = "VariableShape") = run {
    buildOpTensor("VariableShape", name) {
      addInput(input, false)
      attr("out_type", out_type)
    }
  }
}