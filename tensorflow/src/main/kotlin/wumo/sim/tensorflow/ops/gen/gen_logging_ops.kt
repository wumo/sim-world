/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.tensorflow.ops.gen
import org.bytedeco.javacpp.tensorflow.*
import wumo.sim.tensorflow.ops.Output
import wumo.sim.util.Shape
import wumo.sim.tensorflow.buildOp
import wumo.sim.tensorflow.buildOpTensor
import wumo.sim.tensorflow.buildOpTensors
import wumo.sim.tensorflow.tf
import wumo.sim.util.ndarray.NDArray

interface gen_logging_ops {
fun _assert(condition: Output, data: Output, summarize: Long = 3L, name: String = "Assert") = run {
buildOp("Assert", name){
addInput(condition,false)
addInput(data,false)
attr("summarize", summarize)
}
}
fun _audioSummaryV2(tag: Output, tensor: Output, sample_rate: Output, max_outputs: Long = 3L, name: String = "AudioSummaryV2") = run {
buildOpTensor("AudioSummaryV2", name){
addInput(tag,false)
addInput(tensor,false)
addInput(sample_rate,false)
attr("max_outputs", max_outputs)
}
}
fun _histogramSummary(tag: Output, values: Output, name: String = "HistogramSummary") = run {
buildOpTensor("HistogramSummary", name){
addInput(tag,false)
addInput(values,false)
}
}
fun _imageSummary(tag: Output, tensor: Output, max_images: Long = 3L, bad_color: NDArray<*>, name: String = "ImageSummary") = run {
buildOpTensor("ImageSummary", name){
addInput(tag,false)
addInput(tensor,false)
attr("max_images", max_images)
attr("bad_color", bad_color)
}
}
fun _mergeSummary(inputs: Array<Output>, name: String = "MergeSummary") = run {
buildOpTensor("MergeSummary", name){
addInput(inputs,false)
}
}
fun _print(input: Output, data: Output, message: String = "", first_n: Long = -1L, summarize: Long = 3L, name: String = "Print") = run {
buildOpTensor("Print", name){
addInput(input,false)
addInput(data,false)
attr("message", message)
attr("first_n", first_n)
attr("summarize", summarize)
}
}
fun _scalarSummary(tags: Output, values: Output, name: String = "ScalarSummary") = run {
buildOpTensor("ScalarSummary", name){
addInput(tags,false)
addInput(values,false)
}
}
fun _tensorSummary(tensor: Output, description: String = "", labels: Array<String> = arrayOf(), display_name: String = "", name: String = "TensorSummary") = run {
buildOpTensor("TensorSummary", name){
addInput(tensor,false)
attr("description", description)
attr("labels", labels)
attr("display_name", display_name)
}
}
fun _tensorSummaryV2(tag: Output, tensor: Output, serialized_summary_metadata: Output, name: String = "TensorSummaryV2") = run {
buildOpTensor("TensorSummaryV2", name){
addInput(tag,false)
addInput(tensor,false)
addInput(serialized_summary_metadata,false)
}
}
fun _timestamp(name: String = "Timestamp") = run {
buildOpTensor("Timestamp", name){
}
}
}