/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.tensorflow.ops.gen

import org.bytedeco.javacpp.tensorflow.NameAttrList
import wumo.sim.tensorflow.buildOpTensors
import wumo.sim.tensorflow.ops.Output

interface gen_functional_ops {
  fun _for(start: Output, limit: Output, delta: Output, input: Output, body: NameAttrList, name: String = "For") = run {
    buildOpTensors("For", name) {
      addInput(start, false)
      addInput(limit, false)
      addInput(delta, false)
      addInput(input, false)
      attr("body", body)
    }
  }
  
  fun _if(cond: Output, input: Output, tout: Array<Long>, then_branch: NameAttrList, else_branch: NameAttrList, name: String = "If") = run {
    buildOpTensors("If", name) {
      addInput(cond, false)
      addInput(input, false)
      attr("Tout", tout)
      attr("then_branch", then_branch)
      attr("else_branch", else_branch)
    }
  }
  
  fun _partitionedCall(args: Output, tout: Array<Long>, f: NameAttrList, name: String = "PartitionedCall") = run {
    buildOpTensors("PartitionedCall", name) {
      addInput(args, false)
      attr("Tout", tout)
      attr("f", f)
    }
  }
  
  fun _remoteCall(target: Output, args: Output, tout: Array<Long>, f: NameAttrList, name: String = "RemoteCall") = run {
    buildOpTensors("RemoteCall", name) {
      addInput(target, false)
      addInput(args, false)
      attr("Tout", tout)
      attr("f", f)
    }
  }
  
  fun _statefulPartitionedCall(args: Output, tout: Array<Long>, f: NameAttrList, name: String = "StatefulPartitionedCall") = run {
    buildOpTensors("StatefulPartitionedCall", name) {
      addInput(args, false)
      attr("Tout", tout)
      attr("f", f)
    }
  }
  
  fun _symbolicGradient(input: Output, tout: Array<Long>, f: NameAttrList, name: String = "SymbolicGradient") = run {
    buildOpTensors("SymbolicGradient", name) {
      addInput(input, false)
      attr("Tout", tout)
      attr("f", f)
    }
  }
  
  fun _while(input: Output, cond: NameAttrList, body: NameAttrList, name: String = "While") = run {
    buildOpTensors("While", name) {
      addInput(input, false)
      attr("cond", cond)
      attr("body", body)
    }
  }
}