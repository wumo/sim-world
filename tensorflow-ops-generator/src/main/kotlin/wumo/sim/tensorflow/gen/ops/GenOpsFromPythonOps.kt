package wumo.sim.tensorflow.gen.ops

import com.google.protobuf.TextFormat
import org.tensorflow.framework.OpList
import wumo.sim.util.readString
import wumo.sim.util.sb
import wumo.sim.util.sink
import wumo.sim.util.writeString
import java.io.File

fun main(args: Array<String>) {
  generateOpsFromPythonOps("tensorflow-ops-generator/resources/gen_ops",
                                                       "tensorflow/src/main/kotlin/wumo/sim/tensorflow/ops/gen",
                                                       "wumo.sim.tensorflow.ops.gen")
}

fun generateOpsFromPythonOps(fromPath: String,
                             toPath: String,
                             _package: String) {
  
  File(fromPath).listFiles { file ->
    val name = file.nameWithoutExtension
    name.startsWith("gen_") && name.endsWith("_ops")
  }.forEach {
    File("$toPath${File.separatorChar}${it.nameWithoutExtension}.kt").sink { out ->
      out.writeString(generateGroups(it, _package))
    }
  }
}

val opPattern = Regex("#\\s*op\\s[{]((?!#\\s*op\\s*[{])[\\S\\s])*#\\s*[}]")

fun generateGroups(file: File, _package: String) = sb {
  +"""
  /**
  * DO NOT EDIT THIS FILE - it is machine generated
  */
  package $_package
  import org.bytedeco.javacpp.tensorflow.*
  import wumo.sim.tensorflow.ops.Output
  import wumo.sim.util.Shape
  import wumo.sim.tensorflow.buildOp
  import wumo.sim.tensorflow.buildOpTensor
  import wumo.sim.tensorflow.buildOpTensors
  import wumo.sim.tensorflow.tf
  import wumo.sim.util.ndarray.NDArray
  import wumo.sim.tensorflow.types.*
  
  interface ${file.nameWithoutExtension} {
  """
  
  val data = readString(file)
  var result = opPattern.find(data)
  while (result != null) {
    val opDefStr = result.value.replace("#", "")
    val opList = OpList.newBuilder()
    TextFormat.merge(opDefStr, opList)
    val opDef = opList.opList[0]
    OpGenerator(opDef, it.sb).generateOpFunction()
    result = result.next()
  }
  +"}"
}