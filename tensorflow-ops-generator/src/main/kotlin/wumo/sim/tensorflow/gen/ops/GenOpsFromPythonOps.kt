package wumo.sim.tensorflow.gen.ops

import com.google.protobuf.TextFormat
import org.tensorflow.framework.OpList
import wumo.sim.util.*
import java.io.File
import java.io.File.separatorChar

fun main(args: Array<String>) {
  generateOpsFromPythonOps("tensorflow-ops-generator/resources/gen_ops",
                           "tensorflow/src/main/kotlin",
                           "wumo.sim.tensorflow.ops.gen",
                           "wumo.sim.tensorflow.ops.basic",
                           false)
}

fun generateOpsFromPythonOps(fromPath: String,
                             toPath: String,
                             genPackage: String,
                             extensionPackage: String,
                             generateExtend: Boolean) {
  val genPath = toPath + separatorChar + genPackage.replace('.', separatorChar)
  val extensionPath = toPath + separatorChar + extensionPackage.replace('.', separatorChar)
  
  File(genPath).mkdirs()
  File(extensionPath).mkdirs()
  File(fromPath).listFiles { file ->
    val name = file.nameWithoutExtension
    name.startsWith("gen_") && name.endsWith("_ops")
  }.map { opdefs ->
    val genFile = opdefs.nameWithoutExtension
    val opFile = opdefs.nameWithoutExtension.substring(4)
    
    File("$genPath$separatorChar$genFile.kt").sink { genOut ->
      val (genOp, op) = generateGroups(opdefs, genFile, opFile, genPackage, extensionPackage)
      genOut.writeString(genOp)
      if (generateExtend)
        File("$extensionPath$separatorChar$opFile.kt").sink { opOut ->
          opOut.writeString(op)
        }
    }
    opFile
  }.let { ops ->
    if (generateExtend)
      File("$extensionPath${separatorChar}ops_API.kt").sink {
        it.writeString("""
        package $extensionPackage
        interface ops_API:
        ${ops.joinToString(",\n") { "$it.API" }}
      """.trimIndent())
      }
  }
  
}

val opPattern = Regex("#\\s*op\\s[{]((?!#\\s*op\\s*[{])[\\S\\s])*#\\s*[}]")

fun generateGroups(file: File,
                   genOpObject: String,
                   opName: String,
                   genPackage: String,
                   extensionPackage: String): t2<String, String> {
  val genOpSb = StringBuilder()
  val opSb = StringBuilder()
  genOpSb += """
  /**
  * DO NOT EDIT THIS FILE - it is machine generated
  */
  package $genPackage
  import org.bytedeco.javacpp.tensorflow.*
  import wumo.sim.tensorflow.ops.Output
  import wumo.sim.tensorflow.ops.Op
  import wumo.sim.util.Shape
  import wumo.sim.tensorflow.buildOp
  import wumo.sim.tensorflow.buildOpTensor
  import wumo.sim.tensorflow.buildOpTensors
  import wumo.sim.tensorflow.tf
  import wumo.sim.util.ndarray.NDArray
  import wumo.sim.tensorflow.types.*
  
  object $genOpObject {
  """
  opSb += """
  package $extensionPackage
  import org.bytedeco.javacpp.tensorflow.*
  import $genPackage.$genOpObject
  import wumo.sim.tensorflow.ops.Output
  import wumo.sim.tensorflow.ops.Op
  import wumo.sim.util.Shape
  import wumo.sim.tensorflow.buildOp
  import wumo.sim.tensorflow.buildOpTensor
  import wumo.sim.tensorflow.buildOpTensors
  import wumo.sim.tensorflow.tf
  import wumo.sim.util.ndarray.NDArray
  import wumo.sim.tensorflow.types.*
  
  object $opName {
    interface API{
  """
  val data = readString(file)
  var result = opPattern.find(data)
  while (result != null) {
    val opDefStr = result.value.replace("#", "")
    val opList = OpList.newBuilder()
    TextFormat.merge(opDefStr, opList)
    val opDef = opList.opList[0]
    val (gen_op, op) = NewOpGenerator(opDef, genOpObject).generateOpFunctions()
    genOpSb += gen_op
    opSb += op
    result = result.next()
  }
  
  genOpSb += "}"
  opSb += "}\n}"
  return t2(genOpSb.toString(), opSb.toString())
}