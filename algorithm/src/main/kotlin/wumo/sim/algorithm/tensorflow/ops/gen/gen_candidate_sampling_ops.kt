/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.algorithm.tensorflow.ops.gen

import wumo.sim.algorithm.tensorflow.Tensor
import wumo.sim.algorithm.tensorflow.buildOpTensors
import wumo.sim.algorithm.tensorflow.tf

object gen_candidate_sampling_ops {
  fun allCandidateSampler(true_classes: Tensor, num_true: Long, num_sampled: Long, unique: Boolean, seed: Long = 0L, seed2: Long = 0L, name: String = "AllCandidateSampler") = run {
    tf.buildOpTensors("AllCandidateSampler", name) {
      addInput(true_classes, false)
      attr("num_true", num_true)
      attr("num_sampled", num_sampled)
      attr("unique", unique)
      attr("seed", seed)
      attr("seed2", seed2)
    }
  }
  
  fun computeAccidentalHits(true_classes: Tensor, sampled_candidates: Tensor, num_true: Long, seed: Long = 0L, seed2: Long = 0L, name: String = "ComputeAccidentalHits") = run {
    tf.buildOpTensors("ComputeAccidentalHits", name) {
      addInput(true_classes, false)
      addInput(sampled_candidates, false)
      attr("num_true", num_true)
      attr("seed", seed)
      attr("seed2", seed2)
    }
  }
  
  fun fixedUnigramCandidateSampler(true_classes: Tensor, num_true: Long, num_sampled: Long, unique: Boolean, range_max: Long, vocab_file: String = "", distortion: Float = 1.0f, num_reserved_ids: Long = 0L, num_shards: Long = 1L, shard: Long = 0L, unigrams: Array<Float> = arrayOf(), seed: Long = 0L, seed2: Long = 0L, name: String = "FixedUnigramCandidateSampler") = run {
    tf.buildOpTensors("FixedUnigramCandidateSampler", name) {
      addInput(true_classes, false)
      attr("num_true", num_true)
      attr("num_sampled", num_sampled)
      attr("unique", unique)
      attr("range_max", range_max)
      attr("vocab_file", vocab_file)
      attr("distortion", distortion)
      attr("num_reserved_ids", num_reserved_ids)
      attr("num_shards", num_shards)
      attr("shard", shard)
      attr("unigrams", unigrams)
      attr("seed", seed)
      attr("seed2", seed2)
    }
  }
  
  fun learnedUnigramCandidateSampler(true_classes: Tensor, num_true: Long, num_sampled: Long, unique: Boolean, range_max: Long, seed: Long = 0L, seed2: Long = 0L, name: String = "LearnedUnigramCandidateSampler") = run {
    tf.buildOpTensors("LearnedUnigramCandidateSampler", name) {
      addInput(true_classes, false)
      attr("num_true", num_true)
      attr("num_sampled", num_sampled)
      attr("unique", unique)
      attr("range_max", range_max)
      attr("seed", seed)
      attr("seed2", seed2)
    }
  }
  
  fun logUniformCandidateSampler(true_classes: Tensor, num_true: Long, num_sampled: Long, unique: Boolean, range_max: Long, seed: Long = 0L, seed2: Long = 0L, name: String = "LogUniformCandidateSampler") = run {
    tf.buildOpTensors("LogUniformCandidateSampler", name) {
      addInput(true_classes, false)
      attr("num_true", num_true)
      attr("num_sampled", num_sampled)
      attr("unique", unique)
      attr("range_max", range_max)
      attr("seed", seed)
      attr("seed2", seed2)
    }
  }
  
  fun uniformCandidateSampler(true_classes: Tensor, num_true: Long, num_sampled: Long, unique: Boolean, range_max: Long, seed: Long = 0L, seed2: Long = 0L, name: String = "UniformCandidateSampler") = run {
    tf.buildOpTensors("UniformCandidateSampler", name) {
      addInput(true_classes, false)
      attr("num_true", num_true)
      attr("num_sampled", num_sampled)
      attr("unique", unique)
      attr("range_max", range_max)
      attr("seed", seed)
      attr("seed2", seed2)
    }
  }
}