/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.algorithm.tensorflow.ops.gen

import wumo.sim.algorithm.tensorflow.*

fun TF.abort(error_msg: String = "", exit_without_error: Boolean = false, name: String = "Abort") = run {
  buildOp("Abort", name) {
    attr("error_msg", error_msg)
    attr("exit_without_error", exit_without_error)
  }
}

fun TF.controlTrigger(name: String = "ControlTrigger") = run {
  buildOp("ControlTrigger", name) {
  }
}

fun TF.loopCond(input: Tensor, name: String = "LoopCond") = run {
  buildOpTensor("LoopCond", name) {
    addInput(input, false)
  }
}

fun TF.merge(inputs: Array<Tensor>, name: String = "Merge") = run {
  buildOpTensors("Merge", name) {
    addInput(inputs, false)
  }
}

fun TF.nextIteration(data: Tensor, name: String = "NextIteration") = run {
  buildOpTensor("NextIteration", name) {
    addInput(data, false)
  }
}

fun TF.refNextIteration(data: Tensor, name: String = "RefNextIteration") = run {
  buildOpTensor("RefNextIteration", name) {
    addInput(data, true)
  }
}

fun TF.refSelect(index: Tensor, inputs: Array<Tensor>, name: String = "RefSelect") = run {
  buildOpTensor("RefSelect", name) {
    addInput(index, false)
    addInput(inputs, true)
  }
}

fun TF.refSwitch(data: Tensor, pred: Tensor, name: String = "RefSwitch") = run {
  buildOpTensors("RefSwitch", name) {
    addInput(data, true)
    addInput(pred, false)
  }
}

fun TF.switch(data: Tensor, pred: Tensor, name: String = "Switch") = run {
  buildOpTensors("Switch", name) {
    addInput(data, false)
    addInput(pred, false)
  }
}

fun TF.enter(data: Tensor, frame_name: String, is_constant: Boolean = false, parallel_iterations: Long = 10L, name: String = "Enter") = run {
  buildOpTensor("Enter", name) {
    addInput(data, false)
    attr("frame_name", frame_name)
    attr("is_constant", is_constant)
    attr("parallel_iterations", parallel_iterations)
  }
}

fun TF.exit(data: Tensor, name: String = "Exit") = run {
  buildOpTensor("Exit", name) {
    addInput(data, false)
  }
}

fun TF.refEnter(data: Tensor, frame_name: String, is_constant: Boolean = false, parallel_iterations: Long = 10L, name: String = "RefEnter") = run {
  buildOpTensor("RefEnter", name) {
    addInput(data, true)
    attr("frame_name", frame_name)
    attr("is_constant", is_constant)
    attr("parallel_iterations", parallel_iterations)
  }
}

fun TF.refExit(data: Tensor, name: String = "RefExit") = run {
  buildOpTensor("RefExit", name) {
    addInput(data, true)
  }
}

fun TF.refMerge(inputs: Array<Tensor>, name: String = "RefMerge") = run {
  buildOpTensors("RefMerge", name) {
    addInput(inputs, true)
  }
}
