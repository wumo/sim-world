/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.algorithm.tensorflow.ops.gen

import org.bytedeco.javacpp.tensorflow.DT_INT32
import wumo.sim.algorithm.tensorflow.TF
import wumo.sim.algorithm.tensorflow.Tensor
import wumo.sim.algorithm.tensorflow.buildOp
import wumo.sim.algorithm.tensorflow.buildOpTensor
import wumo.sim.util.Dimension

fun TF.assignAddVariableOp(resource: Tensor, value: Tensor, name: String = "AssignAddVariableOp") = run {
  buildOp("AssignAddVariableOp", name) {
    addInput(resource, false)
    addInput(value, false)
  }
}

fun TF.assignSubVariableOp(resource: Tensor, value: Tensor, name: String = "AssignSubVariableOp") = run {
  buildOp("AssignSubVariableOp", name) {
    addInput(resource, false)
    addInput(value, false)
  }
}

fun TF.assignVariableOp(resource: Tensor, value: Tensor, name: String = "AssignVariableOp") = run {
  buildOp("AssignVariableOp", name) {
    addInput(resource, false)
    addInput(value, false)
  }
}

fun TF.consumeMutexLock(mutex_lock: Tensor, name: String = "ConsumeMutexLock") = run {
  buildOp("ConsumeMutexLock", name) {
    addInput(mutex_lock, false)
  }
}

fun TF.destroyResourceOp(resource: Tensor, ignore_lookup_error: Boolean = true, name: String = "DestroyResourceOp") = run {
  buildOp("DestroyResourceOp", name) {
    addInput(resource, false)
    attr("ignore_lookup_error", ignore_lookup_error)
  }
}

fun TF.mutexLock(mutex: Tensor, name: String = "MutexLock") = run {
  buildOpTensor("MutexLock", name) {
    addInput(mutex, false)
  }
}

fun TF.mutexV2(container: String = "", shared_name: String = "", name: String = "MutexV2") = run {
  buildOpTensor("MutexV2", name) {
    attr("container", container)
    attr("shared_name", shared_name)
  }
}

fun TF.readVariableOp(resource: Tensor, dtype: Int, name: String = "ReadVariableOp") = run {
  buildOpTensor("ReadVariableOp", name) {
    addInput(resource, false)
    attrType("dtype", dtype)
  }
}

fun TF.resourceGather(resource: Tensor, indices: Tensor, validate_indices: Boolean = true, dtype: Int, name: String = "ResourceGather") = run {
  buildOpTensor("ResourceGather", name) {
    addInput(resource, false)
    addInput(indices, false)
    attr("validate_indices", validate_indices)
    attrType("dtype", dtype)
  }
}

fun TF.resourceScatterAdd(resource: Tensor, indices: Tensor, updates: Tensor, name: String = "ResourceScatterAdd") = run {
  buildOp("ResourceScatterAdd", name) {
    addInput(resource, false)
    addInput(indices, false)
    addInput(updates, false)
  }
}

fun TF.resourceScatterDiv(resource: Tensor, indices: Tensor, updates: Tensor, name: String = "ResourceScatterDiv") = run {
  buildOp("ResourceScatterDiv", name) {
    addInput(resource, false)
    addInput(indices, false)
    addInput(updates, false)
  }
}

fun TF.resourceScatterMax(resource: Tensor, indices: Tensor, updates: Tensor, name: String = "ResourceScatterMax") = run {
  buildOp("ResourceScatterMax", name) {
    addInput(resource, false)
    addInput(indices, false)
    addInput(updates, false)
  }
}

fun TF.resourceScatterMin(resource: Tensor, indices: Tensor, updates: Tensor, name: String = "ResourceScatterMin") = run {
  buildOp("ResourceScatterMin", name) {
    addInput(resource, false)
    addInput(indices, false)
    addInput(updates, false)
  }
}

fun TF.resourceScatterMul(resource: Tensor, indices: Tensor, updates: Tensor, name: String = "ResourceScatterMul") = run {
  buildOp("ResourceScatterMul", name) {
    addInput(resource, false)
    addInput(indices, false)
    addInput(updates, false)
  }
}

fun TF.resourceScatterSub(resource: Tensor, indices: Tensor, updates: Tensor, name: String = "ResourceScatterSub") = run {
  buildOp("ResourceScatterSub", name) {
    addInput(resource, false)
    addInput(indices, false)
    addInput(updates, false)
  }
}

fun TF.resourceScatterUpdate(resource: Tensor, indices: Tensor, updates: Tensor, name: String = "ResourceScatterUpdate") = run {
  buildOp("ResourceScatterUpdate", name) {
    addInput(resource, false)
    addInput(indices, false)
    addInput(updates, false)
  }
}

fun TF.varHandleOp(container: String = "", shared_name: String = "", dtype: Int, shape: Dimension, name: String = "VarHandleOp") = run {
  buildOpTensor("VarHandleOp", name) {
    attr("container", container)
    attr("shared_name", shared_name)
    attrType("dtype", dtype)
    attr("shape", shape)
  }
}

fun TF.varIsInitializedOp(resource: Tensor, name: String = "VarIsInitializedOp") = run {
  buildOpTensor("VarIsInitializedOp", name) {
    addInput(resource, false)
  }
}

fun TF.variableShape(input: Tensor, out_type: Int = DT_INT32, name: String = "VariableShape") = run {
  buildOpTensor("VariableShape", name) {
    addInput(input, false)
    attrType("out_type", out_type)
  }
}
