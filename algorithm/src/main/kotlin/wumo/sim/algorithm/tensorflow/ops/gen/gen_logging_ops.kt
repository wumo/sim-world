/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.algorithm.tensorflow.ops.gen

import wumo.sim.algorithm.tensorflow.TF
import wumo.sim.algorithm.tensorflow.ops.Output
import wumo.sim.algorithm.tensorflow.buildOp
import wumo.sim.algorithm.tensorflow.buildOpTensor
import wumo.sim.util.ndarray.NDArray

fun TF.assert(condition: Output, data: Output, summarize: Long = 3L, name: String = "Assert") = run {
  buildOp("Assert", name) {
    addInput(condition, false)
    addInput(data, false)
    attr("summarize", summarize)
  }
}

fun TF.audioSummaryV2(tag: Output, tensor: Output, sample_rate: Output, max_outputs: Long = 3L, name: String = "AudioSummaryV2") = run {
  buildOpTensor("AudioSummaryV2", name) {
    addInput(tag, false)
    addInput(tensor, false)
    addInput(sample_rate, false)
    attr("max_outputs", max_outputs)
  }
}

fun TF.histogramSummary(tag: Output, values: Output, name: String = "HistogramSummary") = run {
  buildOpTensor("HistogramSummary", name) {
    addInput(tag, false)
    addInput(values, false)
  }
}

fun TF.imageSummary(tag: Output, tensor: Output, max_images: Long = 3L, bad_color: NDArray<*>, name: String = "ImageSummary") = run {
  buildOpTensor("ImageSummary", name) {
    addInput(tag, false)
    addInput(tensor, false)
    attr("max_images", max_images)
    attr("bad_color", bad_color)
  }
}

fun TF.mergeSummary(inputs: Array<Output>, name: String = "MergeSummary") = run {
  buildOpTensor("MergeSummary", name) {
    addInput(inputs, false)
  }
}

fun TF.print(input: Output, data: Output, message: String = "", first_n: Long = -1L, summarize: Long = 3L, name: String = "Print") = run {
  buildOpTensor("Print", name) {
    addInput(input, false)
    addInput(data, false)
    attr("message", message)
    attr("first_n", first_n)
    attr("summarize", summarize)
  }
}

fun TF.scalarSummary(tags: Output, values: Output, name: String = "ScalarSummary") = run {
  buildOpTensor("ScalarSummary", name) {
    addInput(tags, false)
    addInput(values, false)
  }
}

fun TF.tensorSummary(tensor: Output, description: String = "", labels: Array<String> = arrayOf(), display_name: String = "", name: String = "TensorSummary") = run {
  buildOpTensor("TensorSummary", name) {
    addInput(tensor, false)
    attr("description", description)
    attr("labels", labels)
    attr("display_name", display_name)
  }
}

fun TF.tensorSummaryV2(tag: Output, tensor: Output, serialized_summary_metadata: Output, name: String = "TensorSummaryV2") = run {
  buildOpTensor("TensorSummaryV2", name) {
    addInput(tag, false)
    addInput(tensor, false)
    addInput(serialized_summary_metadata, false)
  }
}

fun TF.timestamp(name: String = "Timestamp") = run {
  buildOpTensor("Timestamp", name) {
  }
}
