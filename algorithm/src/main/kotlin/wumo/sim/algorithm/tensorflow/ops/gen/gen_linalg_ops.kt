/**
 * DO NOT EDIT THIS FILE - it is machine generated
 */
package wumo.sim.algorithm.tensorflow.ops.gen

import wumo.sim.algorithm.tensorflow.Tensor
import wumo.sim.algorithm.tensorflow.buildOpTensor
import wumo.sim.algorithm.tensorflow.buildOpTensors
import wumo.sim.algorithm.tensorflow.tf

object gen_linalg_ops {
  fun cholesky(input: Tensor, name: String = "Cholesky") = run {
    tf.buildOpTensor("Cholesky", name) {
      addInput(input, false)
      
    }
  }
  
  fun choleskyGrad(l: Tensor, grad: Tensor, name: String = "CholeskyGrad") = run {
    tf.buildOpTensor("CholeskyGrad", name) {
      addInput(l, false)
      addInput(grad, false)
      
    }
  }
  
  fun logMatrixDeterminant(input: Tensor, name: String = "LogMatrixDeterminant") = run {
    tf.buildOpTensors("LogMatrixDeterminant", name) {
      addInput(input, false)
      
    }
  }
  
  fun matrixDeterminant(input: Tensor, name: String = "MatrixDeterminant") = run {
    tf.buildOpTensor("MatrixDeterminant", name) {
      addInput(input, false)
      
    }
  }
  
  fun matrixExponential(input: Tensor, name: String = "MatrixExponential") = run {
    tf.buildOpTensor("MatrixExponential", name) {
      addInput(input, false)
      
    }
  }
  
  fun matrixInverse(input: Tensor, adjoint: Boolean = false, name: String = "MatrixInverse") = run {
    tf.buildOpTensor("MatrixInverse", name) {
      addInput(input, false)
      attr("adjoint", adjoint)
    }
  }
  
  fun matrixSolve(matrix: Tensor, rhs: Tensor, adjoint: Boolean = false, name: String = "MatrixSolve") = run {
    tf.buildOpTensor("MatrixSolve", name) {
      addInput(matrix, false)
      addInput(rhs, false)
      attr("adjoint", adjoint)
    }
  }
  
  fun matrixSolveLs(matrix: Tensor, rhs: Tensor, l2_regularizer: Tensor, fast: Boolean = true, name: String = "MatrixSolveLs") = run {
    tf.buildOpTensor("MatrixSolveLs", name) {
      addInput(matrix, false)
      addInput(rhs, false)
      addInput(l2_regularizer, false)
      attr("fast", fast)
    }
  }
  
  fun matrixTriangularSolve(matrix: Tensor, rhs: Tensor, lower: Boolean = true, adjoint: Boolean = false, name: String = "MatrixTriangularSolve") = run {
    tf.buildOpTensor("MatrixTriangularSolve", name) {
      addInput(matrix, false)
      addInput(rhs, false)
      attr("lower", lower)
      attr("adjoint", adjoint)
    }
  }
  
  fun qr(input: Tensor, full_matrices: Boolean = false, name: String = "Qr") = run {
    tf.buildOpTensors("Qr", name) {
      addInput(input, false)
      attr("full_matrices", full_matrices)
    }
  }
  
  fun selfAdjointEigV2(input: Tensor, compute_v: Boolean = true, name: String = "SelfAdjointEigV2") = run {
    tf.buildOpTensors("SelfAdjointEigV2", name) {
      addInput(input, false)
      attr("compute_v", compute_v)
    }
  }
  
  fun svd(input: Tensor, compute_uv: Boolean = true, full_matrices: Boolean = false, name: String = "Svd") = run {
    tf.buildOpTensors("Svd", name) {
      addInput(input, false)
      attr("compute_uv", compute_uv)
      attr("full_matrices", full_matrices)
    }
  }
  
  fun matrixLogarithm(input: Tensor, name: String = "MatrixLogarithm") = run {
    tf.buildOpTensor("MatrixLogarithm", name) {
      addInput(input, false)
      
    }
  }
}