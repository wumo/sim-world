// Targeted by JavaCPP version 1.4.3: DO NOT EDIT THIS FILE

package wumo.sim;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class ale extends wumo.sim.helper.ale {
    static { Loader.load(); }

// Parsed from ale/common/Constants.h

/* *****************************************************************************
 * A.L.E (Arcade Learning Environment)
 * Copyright (c) 2009-2013 by Yavar Naddaf, Joel Veness, Marc G. Bellemare and 
 *   the Reinforcement Learning and Artificial Intelligence Laboratory
 * Released under the GNU General Public License; see License.txt for details. 
 *
 * Based on: Stella  --  "An Atari 2600 VCS Emulator"
 * Copyright (c) 1995-2007 by Bradford W. Mott and the Stella team
 *
 * *****************************************************************************
 *  common_constants.h
 *
 *  Defines a set of constants used by various parts of the player agent code
 *
 **************************************************************************** */

// #ifndef __CONSTANTS_H__
// #define __CONSTANTS_H__

// #include <cassert>
// #include <vector>
// #include <valarray>
// #include <cstdlib>
// #include "../emucore/m6502/src/bspf/src/bspf.hxx"


// Define actions
/** enum Action */
public static final int
    PLAYER_A_NOOP           = 0,
    PLAYER_A_FIRE           = 1,
    PLAYER_A_UP             = 2,
    PLAYER_A_RIGHT          = 3,
    PLAYER_A_LEFT           = 4,
    PLAYER_A_DOWN           = 5,
    PLAYER_A_UPRIGHT        = 6,
    PLAYER_A_UPLEFT         = 7,
    PLAYER_A_DOWNRIGHT      = 8,
    PLAYER_A_DOWNLEFT       = 9,
    PLAYER_A_UPFIRE         = 10,
    PLAYER_A_RIGHTFIRE      = 11,
    PLAYER_A_LEFTFIRE       = 12,
    PLAYER_A_DOWNFIRE       = 13,
    PLAYER_A_UPRIGHTFIRE    = 14,
    PLAYER_A_UPLEFTFIRE     = 15,
    PLAYER_A_DOWNRIGHTFIRE  = 16,
    PLAYER_A_DOWNLEFTFIRE   = 17,
    PLAYER_B_NOOP           = 18,
    PLAYER_B_FIRE           = 19,
    PLAYER_B_UP             = 20,
    PLAYER_B_RIGHT          = 21,
    PLAYER_B_LEFT           = 22,
    PLAYER_B_DOWN           = 23,
    PLAYER_B_UPRIGHT        = 24,
    PLAYER_B_UPLEFT         = 25,
    PLAYER_B_DOWNRIGHT      = 26,
    PLAYER_B_DOWNLEFT       = 27,
    PLAYER_B_UPFIRE         = 28,
    PLAYER_B_RIGHTFIRE      = 29,
    PLAYER_B_LEFTFIRE       = 30,
    PLAYER_B_DOWNFIRE       = 31,
    PLAYER_B_UPRIGHTFIRE    = 32,
    PLAYER_B_UPLEFTFIRE     = 33,
    PLAYER_B_DOWNRIGHTFIRE  = 34,
    PLAYER_B_DOWNLEFTFIRE   = 35,
    RESET                   = 40, // MGB: Use SYSTEM_RESET to reset the environment. 
    UNDEFINED               = 41,
    RANDOM                  = 42,
    SAVE_STATE              = 43,
    LOAD_STATE              = 44,
    SYSTEM_RESET            = 45,
    LAST_ACTION_INDEX       = 50;

public static final int PLAYER_A_MAX = (18);
public static final int PLAYER_B_MAX = (36);

public static native @StdString BytePointer action_to_string(@Cast("Action") int a);

//  Define datatypes

// reward type for RL interface

// Other constant values
public static final int RAM_LENGTH = 128;

// #endif // __CONSTANTS_H__



// Parsed from ale/ale_c_wrapper.h

// #ifndef __ALE_C_WRAPPER_H__
// #define __ALE_C_WRAPPER_H__

// #include "ale_interface.hpp"
  // Declares int rgb_palette[256]
//   #include "atari_ntsc_rgb_palette.h"
  public static native ALEInterface ALE_new();
  public static native void ALE_del(ALEInterface ale);
  public static native @Cast("const char*") BytePointer getString(ALEInterface ale, @Cast("const char*") BytePointer key);
  public static native String getString(ALEInterface ale, String key);
  public static native int getInt(ALEInterface ale,@Cast("const char*") BytePointer key);
  public static native int getInt(ALEInterface ale,String key);
  public static native @Cast("bool") boolean getBool(ALEInterface ale,@Cast("const char*") BytePointer key);
  public static native @Cast("bool") boolean getBool(ALEInterface ale,String key);
  public static native float getFloat(ALEInterface ale,@Cast("const char*") BytePointer key);
  public static native float getFloat(ALEInterface ale,String key);
  public static native void setString(ALEInterface ale,@Cast("const char*") BytePointer key,@Cast("const char*") BytePointer value);
  public static native void setString(ALEInterface ale,String key,String value);
  public static native void setInt(ALEInterface ale,@Cast("const char*") BytePointer key,int value);
  public static native void setInt(ALEInterface ale,String key,int value);
  public static native void setBool(ALEInterface ale,@Cast("const char*") BytePointer key,@Cast("bool") boolean value);
  public static native void setBool(ALEInterface ale,String key,@Cast("bool") boolean value);
  public static native void setFloat(ALEInterface ale,@Cast("const char*") BytePointer key,float value);
  public static native void setFloat(ALEInterface ale,String key,float value);
  public static native void loadROM(ALEInterface ale,@Cast("const char*") BytePointer rom_file);
  public static native void loadROM(ALEInterface ale,String rom_file);
  public static native int act(ALEInterface ale,int action);
  public static native @Cast("bool") boolean game_over(ALEInterface ale);
  public static native void reset_game(ALEInterface ale);
  public static native void getLegalActionSet(ALEInterface ale,IntPointer actions);
  public static native void getLegalActionSet(ALEInterface ale,IntBuffer actions);
  public static native void getLegalActionSet(ALEInterface ale,int[] actions);
  public static native int getLegalActionSize(ALEInterface ale);
  public static native void getMinimalActionSet(ALEInterface ale,IntPointer actions);
  public static native void getMinimalActionSet(ALEInterface ale,IntBuffer actions);
  public static native void getMinimalActionSet(ALEInterface ale,int[] actions);
  public static native int getMinimalActionSize(ALEInterface ale);
  public static native int getFrameNumber(ALEInterface ale);
  public static native int lives(ALEInterface ale);
  public static native int getEpisodeFrameNumber(ALEInterface ale);
  public static native void getScreen(ALEInterface ale,@Cast("unsigned char*") BytePointer screen_data);
  public static native void getScreen(ALEInterface ale,@Cast("unsigned char*") ByteBuffer screen_data);
  public static native void getScreen(ALEInterface ale,@Cast("unsigned char*") byte[] screen_data);
  public static native void getRAM(ALEInterface ale,@Cast("unsigned char*") BytePointer ram);
  public static native void getRAM(ALEInterface ale,@Cast("unsigned char*") ByteBuffer ram);
  public static native void getRAM(ALEInterface ale,@Cast("unsigned char*") byte[] ram);
  public static native int getRAMSize(ALEInterface ale);
  public static native int getScreenWidth(ALEInterface ale);
  public static native int getScreenHeight(ALEInterface ale);

  public static native void getScreenRGB(ALEInterface ale, @Cast("unsigned char*") BytePointer output_buffer);
  public static native void getScreenRGB(ALEInterface ale, @Cast("unsigned char*") ByteBuffer output_buffer);
  public static native void getScreenRGB(ALEInterface ale, @Cast("unsigned char*") byte[] output_buffer);

  public static native void getScreenRGB2(ALEInterface ale, @Cast("unsigned char*") BytePointer output_buffer);
  public static native void getScreenRGB2(ALEInterface ale, @Cast("unsigned char*") ByteBuffer output_buffer);
  public static native void getScreenRGB2(ALEInterface ale, @Cast("unsigned char*") byte[] output_buffer);

  public static native void getScreenGrayscale(ALEInterface ale, @Cast("unsigned char*") BytePointer output_buffer);
  public static native void getScreenGrayscale(ALEInterface ale, @Cast("unsigned char*") ByteBuffer output_buffer);
  public static native void getScreenGrayscale(ALEInterface ale, @Cast("unsigned char*") byte[] output_buffer);

  public static native void saveState(ALEInterface ale);
  public static native void loadState(ALEInterface ale);
  public static native ALEState cloneState(ALEInterface ale);
  public static native void restoreState(ALEInterface ale, ALEState state);
  public static native ALEState cloneSystemState(ALEInterface ale);
  public static native void restoreSystemState(ALEInterface ale, ALEState state);
  public static native void deleteState(ALEState state);
  public static native void saveScreenPNG(ALEInterface ale,@Cast("const char*") BytePointer filename);
  public static native void saveScreenPNG(ALEInterface ale,String filename);

  // Encodes the state as a raw bytestream. This may have multiple '\0' characters
  // and thus should not be treated as a C string. Use encodeStateLen to find the length
  // of the buffer to pass in, or it will be overrun as this simply memcpys bytes into the buffer.
  public static native void encodeState(ALEState state, @Cast("char*") BytePointer buf, int buf_len);
  public static native void encodeState(ALEState state, @Cast("char*") ByteBuffer buf, int buf_len);
  public static native void encodeState(ALEState state, @Cast("char*") byte[] buf, int buf_len);
  public static native int encodeStateLen(ALEState state);
  public static native ALEState decodeState(@Cast("const char*") BytePointer serialized, int len);
  public static native ALEState decodeState(String serialized, int len);

  // 0: Info, 1: Warning, 2: Error
  public static native void setLoggerMode(int mode);

// #endif


}
